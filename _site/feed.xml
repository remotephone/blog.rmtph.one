<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://192.168.1.23:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://192.168.1.23:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://192.168.1.23:4000/" rel="alternate" type="text/html" /><updated>2016-12-21T21:28:07-06:00</updated><id>http://192.168.1.23:4000//</id><title type="html">My digital scratch pad</title><subtitle>Putting stuff together so you don't have to google as hard as I did.
</subtitle><entry><title type="html">Security Labs on a (no) budget</title><link href="http://192.168.1.23:4000/lab/homelab/budget/testing/2016/12/20/Lab_on_a_budget.html" rel="alternate" type="text/html" title="Security Labs on a (no) budget" /><published>2016-12-20T16:29:15-06:00</published><updated>2016-12-20T16:29:15-06:00</updated><id>http://192.168.1.23:4000/lab/homelab/budget/testing/2016/12/20/Lab_on_a_budget</id><content type="html" xml:base="http://192.168.1.23:4000/lab/homelab/budget/testing/2016/12/20/Lab_on_a_budget.html">&lt;h2 id=&quot;so-you-want-a-lab&quot;&gt;So you want a lab?&lt;/h2&gt;

&lt;p&gt;It’s going to cost money. You can’t do this for free. Luckily, you’ve probably spent most of it already. I do everything I need to do on my desktop which does triple duty as a workstation and gaming machine. You don’t need as much storage as I have, but it comes in handy.&lt;/p&gt;

&lt;p&gt;Here’s my desktop configuration:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AMD FX-6350 - overclocked and Hyper212 Evo knockoff Cooler&lt;/li&gt;
  &lt;li&gt;16GB of ram&lt;/li&gt;
  &lt;li&gt;2 SSD’s - 120GB for Windows Install &amp;amp; 256 GB drive split 30GB for Linux install and 220GB for VM drives&lt;/li&gt;
  &lt;li&gt;2TB internal storage drive - Windows image backups, media, other stuff&lt;/li&gt;
  &lt;li&gt;750 GB drive - 500GB for games, 250 GB for random backups&lt;/li&gt;
  &lt;li&gt;AMD RX-480 8GB&lt;/li&gt;
  &lt;li&gt;External 2TB drive for backing up everything important&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The logic here is I have enough cores to run multiple VMs at once and enough storage to keep them all. Other processors are better and I’d upgrade if I needed to, but my processor does pretty well overclocked, I think I’m at 4.5ghz.&lt;/p&gt;

&lt;p&gt;I use multiple drives because I’m always tinkering with and reinstalling OSes. Windows gets the full 120GB because it tends to be space hungrier and that’s where I keep in progress work, the 220GB partition on the other SSD just houses VMs. You could probably get away with 1 single SSD at 500gb, 100gb for windows, 30gb for linux, and the rest for data and VMs. I really like the 250GB of random backup space, I keep installation files of all the applications I use in there and just reinstall without having to download them all over again every time I nuke the install.&lt;/p&gt;

&lt;p&gt;I also have two monitors. I don’t know how people got along before dual monitor setups, but it makes a world of difference. I can full screen a VM on one window, have notes anda  webbrowser open on the other monitor, and not have to pop out of full screen all the time. If I’m doing something between VMs and don’t really need the desktop real estate on the VM, I can keep multiple VM desktops open next to each other to work on. Once you have it, you’ll never want to let it go.&lt;/p&gt;

&lt;h3 id=&quot;virtualization&quot;&gt;Virtualization&lt;/h3&gt;

&lt;p&gt;I’m not a fancy man, so I don’t pay for things if I can avoid it. I highly recommend Virtualbox for most of your virtualization. There’s some machines I’ve gotten (for the OSCP for example) that require VMWare Player, but the free copy does well enough for those 1 offs. Virtualbox supports snapshotting for free which makes a world of difference if you need to turn your computer off or want to quickly wipe a workstation to defaults.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://192.168.1.23:4000/images/vboxconsole.png&quot; alt=&quot;VBox Console&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;oses-and-where-to-get-them&quot;&gt;OSes and where to get them&lt;/h3&gt;

&lt;p&gt;Glad you asked. The linux ones are easy enough to find, go to distro watch or go to a download repository and just navigate backwards through the directories till you find old versions. There’s also handy things like the &lt;a href=&quot;http://vault.centos.org/&quot;&gt;Centos Vaults&lt;/a&gt; where you can get any old version you want. These come in handy if you’re testing specific exploits or versions of something.&lt;/p&gt;

&lt;p&gt;Windows is trickier, but there’s some real nuggets of gold out there. Microsoft has TechNet where you can download some versions of Windows Server through their &lt;a href=&quot;https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2012-r2&quot;&gt;Evaluation Center&lt;/a&gt; assuming you’re using their license appropriately. Make sure you read and follow their rules, I can’t tell you if you’re ok to download them or not, but they are available.&lt;/p&gt;

&lt;p&gt;More interestingly, for consumer OSes from Windows 7 - 10, you can download VHD files that run neatly in Virtualbox. They are free to try and likely expire sometime. They used to offer Windows XP images, but those no longer work. Check em out &lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;save-your-work&quot;&gt;Save your work&lt;/h3&gt;

&lt;p&gt;I can’t emphasize how much good stuff I lost because I didn’t save it. My recommended approach to your VMs is to build them and then create a snapshot before you break anything serious. If you’re going to install a bunch of applications or test an exploit, make sure you save your work.&lt;/p&gt;

&lt;p&gt;There’s a lot of guides and how-to’s out there that I’ve run into that work only part way and then I’m forced to back up a few steps and do something differently or maybe I need to install a certain version of something or the distro package doesn’t work and I need to install from source or whatever, but you’re going to run into problems and you need to have a state where you can revert back to and not lose everything.&lt;/p&gt;

&lt;h3 id=&quot;take-notes&quot;&gt;Take Notes&lt;/h3&gt;

&lt;p&gt;I take notes of a lot of what I do. I keep OneNote documents for all sorts of stuff, and they’re great, but they’re limited in how I can share them. With the new versions of Office, everything has to go into OneDrive and that’s just lame and the new interface sucks and just no.&lt;/p&gt;

&lt;p&gt;I use notedpad ++ a lot. This is a screenshot of me figuring out some Jekyll stuff. It’s real jot it down as I go kinda stuff, but it works. I want to write another article about notepad++ and other tools because I really think it’s one of the most useful things out there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://192.168.1.23:4000/images/notepadnotes.png&quot; alt=&quot;notepadnotes&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;some-thoughts-and-links&quot;&gt;Some thoughts and links&lt;/h3&gt;

&lt;p&gt;Write stuff down. Have enough saves so you can throw it away and be back to a fresh start quickly. Don’t spend all your money to do this. These are some links to get some great stuff.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;Virtualbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vmware.com/products/player/playerpro-evaluation.html&quot;&gt;VMWare Player&lt;/a&gt; - The free one&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2012-r2&quot;&gt;Microsoft Technet Evaluation Center&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&quot;&gt;Windows IE VMs for Developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pcpartpicker.com/&quot;&gt;PC Part Picker&lt;/a&gt; In case you need stuff&lt;/li&gt;
&lt;/ul&gt;</content><summary type="html">So you want a lab?</summary></entry><entry><title type="html">Maintaining a Productive Workflow</title><link href="http://192.168.1.23:4000/how-to/workflow/2016/12/19/Workflow.html" rel="alternate" type="text/html" title="Maintaining a Productive Workflow" /><published>2016-12-19T17:05:15-06:00</published><updated>2016-12-19T17:05:15-06:00</updated><id>http://192.168.1.23:4000/how-to/workflow/2016/12/19/Workflow</id><content type="html" xml:base="http://192.168.1.23:4000/how-to/workflow/2016/12/19/Workflow.html">&lt;p&gt;I work much better with a simple standardized work flow. If you followed my post on Installing Jekyll and getting ready, you’re ready to just use my workflow if you like it. Otherwise, tweak where necessary.&lt;/p&gt;

&lt;p&gt;This workflow assumes you have a local (ubuntu maybe\?) environment for development, use vim to edit text, git on the command line to push most updates, occassionally change things on the github console, have an SSH key set up to authenticate you, and don’t mind being methodical about it.&lt;/p&gt;

&lt;h3 id=&quot;in-a-nutshell&quot;&gt;In a nutshell..&lt;/h3&gt;

&lt;p&gt;I found it easier to work with Chrome and 2 tabs open, one for the repository itself and one for the page to refresh and watch changes live. I use a bash console to make my changes on the site, commit and push them to the master branch (because I haven’t figured out forks yet) and occassionally run a local jekyll server to do tests that I think might break my site. Otherwise, I’m pretty fast and loose and commit half pages occassionally (as you may be able to tell…) and it really doesn’t matter as long as you come back and clean it up in a reasonable amount of time.&lt;/p&gt;

&lt;p&gt;These items were important in order to have an easy workflow&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make sure wherever you develop matches production
    &lt;ul&gt;
      &lt;li&gt;Don’t use unsupported themes in development, for example&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Don’t make changes in the web console without pulling them back locally&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;git pull&lt;/li&gt;
          &lt;li&gt;git submodule update&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t make multiple huge changes at once. I feel pretty comfortable creating a full post page one at a time. I don’t feel comfortable changing my default.html layout without first testing it and changing one part at a time. It’s much harder to work backwards and troubleshoot if you’ve done a few different things and you can’t remember them all.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Pick a style you like and stick with it, at least until you have some content. Once you have a decent amount of content, you can be aware of how changes you make affect all your content.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that, it’s time to work. I do the following things&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Always keep my github.io page and my localhost page ready. You can quickly review changes and make sure you pushed them right this way.&lt;/li&gt;
  &lt;li&gt;It’s easier for me to work from my root directory and tree around and edit files directories deep than to get into a directory and find out I didn’t back out before creating a new page.&lt;/li&gt;
  &lt;li&gt;Refresh and test frequently. If I’m testing formatting, I often rebuild several times very quickly and refresh my localhost page to see them happen in action.&lt;/li&gt;
  &lt;li&gt;Stand on the shoulders of giants. Copy that template, reuse that syntax, google that stackoverflow. Other people have solved these problems, so use their knowledge. Just pay attention to when a fix you want to apply breaks something you’re doing or follows a pattern you don’t use.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I work with a dual monitor set up both at home and at work. I don’t know how people get along with single monitors unless they’re ultrawide. Invest in a second monitor, it’s worth it.&lt;/p&gt;</content><summary type="html">I work much better with a simple standardized work flow. If you followed my post on Installing Jekyll and getting ready, you’re ready to just use my workflow if you like it. Otherwise, tweak where necessary.</summary></entry><entry><title type="html">Installing Jekyll for Security Professionals - or “I don’t know what I’m doing”</title><link href="http://192.168.1.23:4000/2016/12/19/Installing_Jekyll_For_Security_Admins.html" rel="alternate" type="text/html" title="Installing Jekyll for Security Professionals - or &quot;I don't know what I'm doing&quot;" /><published>2016-12-19T17:05:15-06:00</published><updated>2016-12-19T17:05:15-06:00</updated><id>http://192.168.1.23:4000/2016/12/19/Installing_Jekyll_For_Security_Admins</id><content type="html" xml:base="http://192.168.1.23:4000/2016/12/19/Installing_Jekyll_For_Security_Admins.html">&lt;h2 id=&quot;why-are-we-here-anyway&quot;&gt;Why are we here anyway?&lt;/h2&gt;

&lt;p&gt;Jekyll lets you create static pages easily. I’m a security person, not a website admin and I really didn’t want to spend the time learn while also generating content for the site. Maybe one day I’ll move this to something more formal, but this really seems to do well enough for now.&lt;/p&gt;

&lt;p&gt;One advantage of this style is learning how to interact with github. Even simple pulls and commits are things I never really had to do, so its nice to least know what’s happening when trying to speak to DevOps teams.&lt;/p&gt;

&lt;p&gt;The most obvious advantage is security. Lots of the WYSIWYG CMS’s get interesting once you add plugins and that’s when you add vulnerabilities. Static pages are just that, static pages. You can get “dynamic” enough with the features i Jekyll and that’s good enough for me. Besides, how embarrassing would it be to have my security notes webpage spamming people because it was compromised?&lt;/p&gt;

&lt;h2 id=&quot;why-jekyll&quot;&gt;Why Jekyll?&lt;/h2&gt;

&lt;p&gt;I found Jekyll to be pretty well documented with plenty of templates and site examples to copy and choose from. &lt;a href=&quot;https://www.smashingmagazine.com/2014/08/build-blog-jekyll-github-pages/&quot;&gt;This&lt;/a&gt; site was the first guide I followed, but you take pretty much their entire site layout and then I found it difficult to add and change things without breaking the template (this may be entirely my fault).&lt;/p&gt;

&lt;p&gt;I’m pretty comfortable on the command line, so next I tired Github’s documentation &lt;a href=&quot;https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/&quot;&gt;here.&lt;/a&gt; That worked a lot better, but the layout was super basic.&lt;/p&gt;

&lt;p&gt;Ultimately I mashed a few different templates and guides together. This is risky if you’re committing large changes together all at once, so I have been making changes slowly one at a time. This approach is much easier when you’re just figuring this out and you’re trying to learn github and jekyll and markdown at the same time.&lt;/p&gt;

&lt;h2 id=&quot;getting-started---locally-and-remotely&quot;&gt;Getting Started - locally and remotely&lt;/h2&gt;

&lt;p&gt;There are a few things you need to do. I don’t do this stuff on my desktop, I use a VM (even working in an Ubuntu variant), clone the repository there, do my work, and then throw away the VM or restore a snapshot. It means I have to manually add SSH keys to my github account each time depending on where I’m working from, but you can make this easy with the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl -u &quot;username&quot; --data '{&quot;title&quot;:&quot;KEYNAME&quot;,&quot;key&quot;:&quot;ssh-rsa AAA...&quot;}' https://api.github.com/user/keys&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since I’m in the web console anyway, it’s easy to delete unneeded keys. You’ll also have to edit your ssh config file but you can avoid all that work if you just do it from your desktop. I’d rather not for reasons I’m still working out.&lt;/p&gt;

&lt;p&gt;If you’re working out of a new VM or environment, you’ll need to repeat steps 1, 2, and 3 each time. Once your site is initially set up, you should be able to just install the environment, clone your repo, build it, make changes, test, commit them, and then throw it all away. Fun, no?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Install and prep your environment.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;I used ubuntu 16.04. You can use whatever you want, but you’re on your own.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Run the following:&lt;/p&gt;

        &lt;p&gt;sudo apt-get install ruby ruby-dev make gcc git&lt;/p&gt;

        &lt;p&gt;bundle install&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Create a new repository manually using the &lt;a href=&quot;https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/&quot;&gt;github documentation&lt;/a&gt; if this is your first time creating one.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;I also turn on a color scheme in VIM (shine until it fails me) and enable spellchecking. Add this to your ~/.vimrc file
        &lt;ul&gt;
          &lt;li&gt;set spell spelllang=en_us&lt;/li&gt;
          &lt;li&gt;colorscheme shine&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;I keep a directory of repositories in my home directory to minimize clutter called gits and do all my work out of there&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create your repository through the web console and clone it locally or create it locally and push it out.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;I tried doing it manually and this was just easier.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure you SSH keys are set up to allow you to push commits quickly. I have a crazy password and its a pain to type it and my username all the time instead of just unlocking my ssh key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find the sites you want to copy pages to template from, cd into the directory you’ll use them and wget the raw github file instead of trying to copy and paste it into vim.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Be nice and credit them - See my About page for the people I owe for this&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Build a single post and make sure you have the basics you want in there. This includes the header at the top that outlines the formatting.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Commit your changes and make a local backup! I’ve wiped out this repository half a dozen times because I made a change I didn’t remember or understand. Once you have something basic that works, BACK IT UP.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;You can unzip your backup, delete the repo, and repush it back out to github instead of messing with any other silliness. If youre like me and don’t know what you’re doing, you will mess it up. Save yourself some trouble.&lt;/li&gt;
      &lt;li&gt;I learned github let’s you restore to an older version, but I can’t find a way to go from a restored older version to a newer one. If bad comes to worse or you completely change themes, at least you can always just dump your posts folder into your new repository and bam, you’re back&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s really all I got so far. Build something very basic that works, back it up, know how to rebuild it quickly, and you’ll handle half the trouble you will inevitably run into very quickly.&lt;/p&gt;</content><summary type="html">Why are we here anyway?</summary></entry><entry><title type="html">What is Markdown anyway?</title><link href="http://192.168.1.23:4000/quick-reference/into/whatamidoing/2016/12/18/what-is-markdown.html" rel="alternate" type="text/html" title="What is Markdown anyway?" /><published>2016-12-18T21:14:55-06:00</published><updated>2016-12-18T21:14:55-06:00</updated><id>http://192.168.1.23:4000/quick-reference/into/whatamidoing/2016/12/18/what-is-markdown</id><content type="html" xml:base="http://192.168.1.23:4000/quick-reference/into/whatamidoing/2016/12/18/what-is-markdown.html">&lt;p&gt;I don’t know markdown syntax but it seems easy enough. This page is intended to be a quick reference for the 5-10 things I will no doubt do over and over and over.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kramdown.gettalong.org/quickref.html&quot;&gt;This page&lt;/a&gt; seems pretty interesting, it has a lot of the syntax I’ll be using.&lt;/p&gt;

&lt;p&gt;This is the format for my post titles. Markup will usually be md for markdown, but maybe I’ll get fancy one day.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;``` YEAR-MONTH-DAY-title.md ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To create a link, use &lt;code class=&quot;highlighter-rouge&quot;&gt;\[Text\]\(http\(s\)://site\.com\)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can add a excerpt_separator: line to your _config.yml file to set a preview in your post. I haven’t gotten it to work yet…&lt;/p&gt;

&lt;p&gt;These are the original notes from the Jekyll page creation. Good stuff.&lt;/p&gt;

&lt;h2 id=&quot;welcome-to-github-pages&quot;&gt;Welcome to GitHub Pages&lt;/h2&gt;

&lt;p&gt;You can use the &lt;a href=&quot;https://github.com/remotephone/remotephone.github.io/edit/master/index.md&quot;&gt;editor on GitHub&lt;/a&gt; to maintain and preview the content for your website in Markdown files.&lt;/p&gt;

&lt;p&gt;Whenever you commit to this repository, GitHub Pages will run &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to rebuild the pages in your site, from the content in your Markdown files.&lt;/p&gt;

&lt;h3 id=&quot;markdown&quot;&gt;Markdown&lt;/h3&gt;

&lt;p&gt;Markdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Syntax highlighted code block

&lt;span class=&quot;gh&quot;&gt;# Header 1&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;## Header 2&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;### Header 3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;
-&lt;/span&gt; Bulleted
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; List
&lt;span class=&quot;p&quot;&gt;
1.&lt;/span&gt; Numbered
&lt;span class=&quot;p&quot;&gt;2.&lt;/span&gt; List

&lt;span class=&quot;gs&quot;&gt;**Bold**&lt;/span&gt; and _Italic_ and &lt;span class=&quot;sb&quot;&gt;`Code`&lt;/span&gt; text

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; and !&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;For more details see &lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;GitHub Flavored Markdown&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;jekyll-themes&quot;&gt;Jekyll Themes&lt;/h3&gt;

&lt;p&gt;Your Pages site will use the layout and styles from the Jekyll theme you have selected in your &lt;a href=&quot;https://github.com/remotephone/remotephone.github.io/settings&quot;&gt;repository settings&lt;/a&gt;. The name of this theme is saved in the Jekyll &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; configuration file.&lt;/p&gt;

&lt;h3 id=&quot;support-or-contact&quot;&gt;Support or Contact&lt;/h3&gt;

&lt;p&gt;Having trouble with Pages? Check out our &lt;a href=&quot;https://help.github.com/categories/github-pages-basics/&quot;&gt;documentation&lt;/a&gt; or &lt;a href=&quot;https://github.com/contact&quot;&gt;contact support&lt;/a&gt; and we’ll help you sort it out.&lt;/p&gt;</content><summary type="html">I don’t know markdown syntax but it seems easy enough. This page is intended to be a quick reference for the 5-10 things I will no doubt do over and over and over.</summary></entry><entry><title type="html">Welcome to My Scratchpad</title><link href="http://192.168.1.23:4000/welcome/hello/info/2016/12/18/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to My Scratchpad" /><published>2016-12-18T20:49:55-06:00</published><updated>2016-12-18T20:49:55-06:00</updated><id>http://192.168.1.23:4000/welcome/hello/info/2016/12/18/welcome-to-jekyll</id><content type="html" xml:base="http://192.168.1.23:4000/welcome/hello/info/2016/12/18/welcome-to-jekyll.html">&lt;p&gt;Thanks for visiting my page. Hopefully you’re here because you’ve run into some of the same problems I’ve run into and are looking for an answer. Maybe I can be that answer. Maybe.&lt;/p&gt;</content><summary type="html">Thanks for visiting my page. Hopefully you’re here because you’ve run into some of the same problems I’ve run into and are looking for an answer. Maybe I can be that answer. Maybe.</summary></entry></feed>
